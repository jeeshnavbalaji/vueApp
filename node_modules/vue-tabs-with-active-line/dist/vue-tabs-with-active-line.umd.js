(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.VueTabsWithActiveLine = {}));
}(this, function (exports) { 'use strict';

  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //

  var script = {
    name: 'vue-tabs-with-active-line',
    props: {
      currentTab: {
        type: String,
        required: true,
      },
      tabs: {
        type: Array,
        required: true,
      },
      updated: {
        type: [Boolean, String, Array],
        default: undefined,
      },
      wrapperClass: {
        type: String,
        required: false,
      },
      tabClass: {
        type: String,
        required: false,
      },
      tabActiveClass: {
        type: String,
        required: false,
      },
      lineClass: {
        type: String,
        required: false,
      },
    },
    watch: {
      currentTab: function currentTab(newCurrentTab) {
        if (this.newTab === newCurrentTab) { return; }
        this.moveActiveLine(newCurrentTab);
      },
      updated: function updated() {
        this.moveActiveLine(this.currentTab);
      },
    },
    data: function () { return ({
      activeLineWidth: 0,
      activeLineOffset: 0,
      newTab: '',
    }); },
    methods: {
      handleClick: function handleClick(value) {
        this.$emit('onClick', value);
        this.moveActiveLine(value);

        this.newTab = value;
      },
      moveActiveLine: function moveActiveLine(newValue) {
        if (!this.currentTab) { return; }

        if (!this.$refs || !this.$refs[newValue] || !this.$refs[newValue][0]) { return; }
        var element = this.$refs[newValue][0];

        this.activeLineWidth = element.clientWidth;
        this.activeLineOffset = element.offsetLeft;
      },
    },
    mounted: function mounted() {
      this.moveActiveLine(this.currentTab);
    },
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
  /* server only */
  , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
      createInjectorSSR = createInjector;
      createInjector = shadowMode;
      shadowMode = false;
    } // Vue.extend constructor export interop.


    var options = typeof script === 'function' ? script.options : script; // render functions

    if (template && template.render) {
      options.render = template.render;
      options.staticRenderFns = template.staticRenderFns;
      options._compiled = true; // functional template

      if (isFunctionalTemplate) {
        options.functional = true;
      }
    } // scopedId


    if (scopeId) {
      options._scopeId = scopeId;
    }

    var hook;

    if (moduleIdentifier) {
      // server build
      hook = function hook(context) {
        // 2.3 injection
        context = context || // cached call
        this.$vnode && this.$vnode.ssrContext || // stateful
        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
        // 2.2 with runInNewContext: true

        if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
          context = __VUE_SSR_CONTEXT__;
        } // inject component styles


        if (style) {
          style.call(this, createInjectorSSR(context));
        } // register component module identifier for async chunk inference


        if (context && context._registeredComponents) {
          context._registeredComponents.add(moduleIdentifier);
        }
      }; // used by ssr in case component is cached and beforeCreate
      // never gets called


      options._ssrRegister = hook;
    } else if (style) {
      hook = shadowMode ? function () {
        style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
      } : function (context) {
        style.call(this, createInjector(context));
      };
    }

    if (hook) {
      if (options.functional) {
        // register for functional component in vue file
        var originalRender = options.render;

        options.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        // inject component registration as beforeCreate hook
        var existing = options.beforeCreate;
        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }

    return script;
  }

  var normalizeComponent_1 = normalizeComponent;

  /* script */
  var __vue_script__ = script;

  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "nav",
      { staticClass: "tabs", class: _vm.wrapperClass },
      [
        _vm._l(_vm.tabs, function(tab) {
          return _c("button", {
            key: tab.title,
            ref: tab.value,
            refInFor: true,
            staticClass: "tabs__item",
            class: [
              { tabs__item_active: tab.value === _vm.currentTab },
              tab.value === _vm.currentTab && _vm.tabActiveClass
                ? _vm.tabActiveClass
                : "",
              _vm.tabClass
            ],
            attrs: { type: "button", disabled: tab.disabled || false },
            domProps: { innerHTML: _vm._s(tab.title) },
            on: {
              click: function($event) {
                return _vm.handleClick(tab.value)
              }
            }
          })
        }),
        _vm._v(" "),
        _c("div", {
          staticClass: "tabs__active-line",
          class: _vm.lineClass,
          style: {
            width: _vm.activeLineWidth + "px",
            transform: "translateX(" + _vm.activeLineOffset + "px)"
          }
        })
      ],
      2
    )
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    var __vue_inject_styles__ = undefined;
    /* scoped */
    var __vue_scope_id__ = undefined;
    /* module identifier */
    var __vue_module_identifier__ = undefined;
    /* functional template */
    var __vue_is_functional_template__ = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var component = normalizeComponent_1(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      undefined,
      undefined
    );

  // Import vue component

  // install function executed by Vue.use()
  function install(Vue) {
    if (install.installed) { return; }
    install.installed = true;
    Vue.component('VueTabsWithActiveLine', component);
  }

  // Create module definition for Vue.use()
  var plugin = {
    install: install,
  };

  // To auto-install when vue is found
  /* global window global */
  var GlobalVue = null;
  if (typeof window !== 'undefined') {
    GlobalVue = window.Vue;
  } else if (typeof global !== 'undefined') {
    GlobalVue = global.Vue;
  }
  if (GlobalVue) {
    GlobalVue.use(plugin);
  }

  // It's possible to expose named exports when writing components that can
  // also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
  // export const RollupDemoDirective = component;

  exports.default = component;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
